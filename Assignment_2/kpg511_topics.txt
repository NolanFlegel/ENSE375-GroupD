Extensibility

	The term "extensibility" means adding changes to the existing system. As people like customization, Mercurial has been designed to allow people to explore and write extensions for it. Mercurials extensions have been designed to be written in Python primarily in the form of modules. Writing extensions is easy and simple. They're powerful for users who want advanced functionality. In order to allow the extension, you need to give a path to Mercurial. Cmdtable command is used to describe the commands.  To use an extension, it has to be written to the Mercurials Core File. The cmdtable decorator consists of a function, options for commands, and a synopsis of the command. Usually, there is a repository associated with the new commands that are written and if there is no repository associated with it norepo= True is written. To find a list of extensions you can write extensions.find. 

Several commands are used for setup of ui, extension setup,repository setup such as uisetup(), extsetup(),reposetup(). To wrap functions extensions.wrapfunction() is used it would be ideal to write this into a subclass because each extension is associated with a repository so that it would make the execution of the functions much easier without running into errors. Functional capabilities of pushing, pulling, and committing to repositories are also possible.

Hooks are an additional feature in extensions, there are basically two types of in-process hooks and external hooks. They can simply be understood as an automatic response to an event taking place in a repository.Examples of some actions that are incoming - For each new change set that is brought into the repository, this is run once, outgoing - Run after transmitting a group of changes from a repository, pre-commit - Before beginning a commit, pre-tag - used prior making a tag and update - This is executed after the working directory has been changed or combined.
